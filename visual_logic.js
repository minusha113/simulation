/**
 * Generated by Verge3D Puzzles v.3.4.0 pre4
 * Mon Sep 21 2020 22:40:38 GMT+0545 (Nepal Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

_pGlob.wooProductInfo = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var PROC = {
    
};

var state;


/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



state = 0;

eventHTMLElem('click', 'openFist', true, function(event) {
  if (state == 1) {

    operateAnimation('PLAY', 'Armature', 0, 30, 'LoopOnce', 1,
            function() {
      state = 0;
    }, undefined, true);

        } else if (state == 6) {

    operateAnimation('PLAY', 'Armature', 279, 309, 'LoopOnce', 1,
            function() {
      state = 2;
    }, undefined, true);

        } else if (state == 7) {

    operateAnimation('PLAY', 'Armature', 372, 402, 'LoopOnce', 1,
            function() {
      state = 3;
    }, undefined, true);

        } else if (state == 8) {

    operateAnimation('PLAY', 'Armature', 465, 495, 'LoopOnce', 1,
            function() {
      state = 4;
    }, undefined, true);

        } else if (state == 9) {

    operateAnimation('PLAY', 'Armature', 558, 588, 'LoopOnce', 1,
            function() {
      state = 5;
    }, undefined, true);

        } else if (state == 13) {

    operateAnimation('PLAY', 'Armature', 372, 402, 'LoopOnce', 1,
            function() {
      state = 3;
    }, undefined, true);

        } else if (state == 16) {

    operateAnimation('PLAY', 'Armature', 465, 495, 'LoopOnce', 1,
            function() {
      state = 4;
    }, undefined, true);

        } else if (state == 19) {

    operateAnimation('PLAY', 'Armature', 558, 588, 'LoopOnce', 1,
            function() {
      state = 5;
    }, undefined, true);

        }
});

eventHTMLElem('click', 'closeFist', true, function(event) {
  if (state == 0) {

    operateAnimation('PLAY', 'Armature', 0, 30, 'LoopOnce', 1,
            function() {
      state = 1;
    }, undefined, false);

        } else if (state == 2) {

    operateAnimation('PLAY', 'Armature', 279, 309, 'LoopOnce', 1,
            function() {
      state = 6;
    }, undefined, false);

        } else if (state == 3) {

    operateAnimation('PLAY', 'Armature', 372, 402, 'LoopOnce', 1,
            function() {
      state = 7;
    }, undefined, false);

        } else if (state == 4) {

    operateAnimation('PLAY', 'Armature', 465, 495, 'LoopOnce', 1,
            function() {
      state = 16;
    }, undefined, false);

        } else if (state == 5) {

    operateAnimation('PLAY', 'Armature', 558, 588, 'LoopOnce', 1,
            function() {
      state = 19;
    }, undefined, false);

        }
});

eventHTMLElem('click', 'right', true, function(event) {
  if (state == 0) {

    operateAnimation('PLAY', 'Armature', 31, 61, 'LoopOnce', 1,
            function() {
      state = 2;
    }, undefined, false);

        } else if (state == 1) {

    operateAnimation('PLAY', 'Armature', 155, 185, 'LoopOnce', 1,
            function() {
      state = 6;
    }, undefined, false);

        } else if (state == 3) {

    operateAnimation('PLAY', 'Armature', 62, 92, 'LoopOnce', 1,
            function() {
      state = 0;
    }, undefined, true);

        } else if (state == 4) {

    operateAnimation('PLAY', 'Armature', 496, 526, 'LoopOnce', 1,
            function() {
      state = 11;
    }, undefined, false);

        } else if (state == 5) {

    operateAnimation('PLAY', 'Armature', 589, 619, 'LoopOnce', 1,
            function() {
      state = 20;
    }, undefined, false);

        } else if (state == 7) {

    operateAnimation('PLAY', 'Armature', 186, 216, 'LoopOnce', 1,
            function() {
      state = 1;
    }, undefined, true);

        } else if (state == 18) {

    operateAnimation('PLAY', 'Armature', 527, 557, 'LoopOnce', 1,
            function() {
      state = 4;
    }, undefined, true);

        } else if (state == 11) {

    operateAnimation('PLAY', 'Armature', 620, 650, 'LoopOnce', 1,
            function() {
      state = 5;
    }, undefined, true);

        }
});

eventHTMLElem('click', 'left', true, function(event) {
  if (state == 0) {

    operateAnimation('PLAY', 'Armature', 62, 92, 'LoopOnce', 1,
            function() {
      state = 3;
    }, undefined, false);

        } else if (state == 1) {

    operateAnimation('PLAY', 'Armature', 186, 216, 'LoopOnce', 1,
            function() {
      state = 7;
    }, undefined, false);

        } else if (state == 2) {

    operateAnimation('PLAY', 'Armature', 31, 61, 'LoopOnce', 1,
            function() {
      state = 0;
    }, undefined, true);

        } else if (state == 4) {

    operateAnimation('PLAY', 'Armature', 527, 557, 'LoopOnce', 1,
            function() {
      state = 18;
    }, undefined, false);

        } else if (state == 5) {

    operateAnimation('PLAY', 'Armature', 620, 650, 'LoopOnce', 1,
            function() {
      state = 12;
    }, undefined, false);

        } else if (state == 6) {

    operateAnimation('PLAY', 'Armature', 155, 185, 'LoopOnce', 1,
            function() {
      state = 1;
    }, undefined, true);

        } else if (state == 11) {

    operateAnimation('PLAY', 'Armature', 496, 526, 'LoopOnce', 1,
            function() {
      state = 4;
    }, undefined, true);

        } else if (state == 20) {

    operateAnimation('PLAY', 'Armature', 589, 619, 'LoopOnce', 1,
            function() {
      state = 5;
    }, undefined, true);

        }
});

eventHTMLElem('click', 'extention', true, function(event) {
  if (state == 0) {

    operateAnimation('PLAY', 'Armature', 93, 123, 'LoopOnce', 1,
            function() {
      state = 4;
    }, undefined, false);

        } else if (state == 1) {

    operateAnimation('PLAY', 'Armature', 217, 247, 'LoopOnce', 1,
            function() {
      state = 8;
    }, undefined, false);

        } else if (state == 2) {

    operateAnimation('PLAY', 'Armature', 341, 371, 'LoopOnce', 1,
            function() {
      state = 11;
    }, undefined, false);

        } else if (state == 3) {

    operateAnimation('PLAY', 'Armature', 434, 464, 'LoopOnce', 1,
            function() {
      state = 14;
    }, undefined, false);

        } else if (state == 5) {

    operateAnimation('PLAY', 'Armature', 124, 154, 'LoopOnce', 1,
            function() {
      state = 0;
    }, undefined, true);

        } else if (state == 12) {

    operateAnimation('PLAY', 'Armature', 310, 340, 'LoopOnce', 1,
            function() {
      state = 2;
    }, undefined, true);

        } else if (state == 15) {

    operateAnimation('PLAY', 'Armature', 403, 433, 'LoopOnce', 1,
            function() {
      state = 3;
    }, undefined, true);

        }
});

eventHTMLElem('click', 'flexion', true, function(event) {
  if (state == 0) {

    operateAnimation('PLAY', 'Armature', 124, 154, 'LoopOnce', 1,
            function() {
      state = 5;
    }, undefined, false);

        } else if (state == 1) {

    operateAnimation('PLAY', 'Armature', 248, 278, 'LoopOnce', 1,
            function() {
      state = 9;
    }, undefined, false);

        } else if (state == 2) {

    operateAnimation('PLAY', 'Armature', 310, 340, 'LoopOnce', 1,
            function() {
      state = 12;
    }, undefined, false);

        } else if (state == 3) {

    operateAnimation('PLAY', 'Armature', 403, 433, 'LoopOnce', 1,
            function() {
      state = 15;
    }, undefined, false);

        } else if (state == 4) {

    operateAnimation('PLAY', 'Armature', 93, 123, 'LoopOnce', 1,
            function() {
      state = 0;
    }, undefined, true);

        } else if (state == 11) {

    operateAnimation('PLAY', 'Armature', 341, 371, 'LoopOnce', 1,
            function() {
      state = 2;
    }, undefined, true);

        } else if (state == 14) {

    operateAnimation('PLAY', 'Armature', 434, 464, 'LoopOnce', 1,
            function() {
      state = 3;
    }, undefined, true);

        }
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
